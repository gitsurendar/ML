Milage_Prediction  Project
link of Collab 
https://colab.research.google.com/drive/1RtABYNJVyFcphosE_sIo2RfbL-gwYM6e?usp=drive_link

#source code 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("https://github.com/YBI-Foundation/Dataset/raw/main/MPG.csv")

df.head()

df.nunique()
df.info()
df.describe()
selected_columns=['mpg','cylinders','displacement','horsepower','weight','acceleration','model_year']
df[selected_columns].corr()
df[['mpg','cylinders','displacement','horsepower','weight','acceleration','model_year']].corr()
df=df.dropna()
sns.pairplot(df,x_vars=['mpg','cylinders','displacement','horsepower','weight','acceleration','model_year'],y_vars='mpg')
plt.show()
sns.regplot(df,x='mpg',y='displacement')
plt.show()
df.columns
y=df['mpg']
y.shape
x=df[['displacement','horsepower','weight','acceleration']]
x.shape

from sklearn.preprocessing import StandardScaler
 ss = StandardScaler()
 x = ss.fit_transform(x)
pd.DataFrame(x).describe()

from  sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2529)
x_train.shape,y_train.shape,x_test.shape,y_test.shape

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)

lr.intercept_
lr.coef_
y_pred=lr.predict(x_test)
y_pred

from sklearn.metrics import mean_absolute_error,r2_score,mean_absolute_percentage_error
mean_absolute_error(y_test,y_pred)
mean_absolute_percentage_error(y_test,y_pred)
r2_score(y_test,y_pred)

from sklearn.preprocessing import PolynomialFeatures
x_train2=poly.fit_transform(x_train)
x_test2=poly.fit_transform(x_test)
lr.fit(x_train2,y_train)
